---
import { getCollection } from 'astro:content';

// Get categories and blog posts
const categories = await getCollection('categories');
const posts = await getCollection('blog');

// Sort categories by order
const sortedCategories = categories.sort((a, b) => a.data.order - b.data.order);

// Group posts by category (simplified mapping)
const postsByCategory = {
  hosting: posts.filter(post => 
    post.data.title.toLowerCase().includes('hosting') || 
    post.data.title.toLowerCase().includes('hostnin') ||
    post.data.title.toLowerCase().includes('cpanel')
  ),
  tutorials: posts.filter(post => 
    post.data.title.toLowerCase().includes('guide') ||
    post.data.title.toLowerCase().includes('tutorial') ||
    post.data.title.toLowerCase().includes('react') ||
    post.data.title.toLowerCase().includes('vue') ||
    post.data.title.toLowerCase().includes('laravel') ||
    post.data.title.toLowerCase().includes('wordpress') ||
    post.data.title.toLowerCase().includes('filament')
  ),
  domains: posts.filter(post => 
    post.data.title.toLowerCase().includes('domain')
  ),
  'digital-products': posts.filter(post => 
    post.data.title.toLowerCase().includes('digital') ||
    post.data.title.toLowerCase().includes('product')
  )
};
---

<div class="mega-menu-container">
  <button class="mega-menu-trigger" id="mega-menu-btn">
    <span>Categories</span>
    <svg class="chevron" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <polyline points="6,9 12,15 18,9"></polyline>
    </svg>
  </button>
  
  <div class="mega-menu-dropdown" id="mega-menu-dropdown">
    <div class="mega-menu-content">
      <!-- Categories Sections -->
      {sortedCategories.map((category) => {
        const categoryPosts = postsByCategory[category.id] || [];
        return (
          <div class="mega-menu-section">
            <h3 class="section-title">
              <a href={`/?category=${category.id}`} class="category-link">
                <span class="category-icon">{category.data.icon}</span>
                {category.data.title}
              </a>
            </h3>
            <p class="section-description">{category.data.description}</p>
            
            {categoryPosts.length > 0 && (
              <div class="posts-list">
                {categoryPosts.slice(0, 3).map((post) => (
                  <div class="post-item">
                    <a href={`/blog/${post.id}/`} class="post-link">
                      <div class="post-thumbnail">
                        {post.data.heroImage && (
                          <img src={post.data.heroImage.src || post.data.heroImage} alt={post.data.title} />
                        )}
                      </div>
                      <div class="post-info">
                        <h4 class="post-title">{post.data.title}</h4>
                        <p class="post-excerpt">{post.data.description}</p>
                      </div>
                    </a>
                  </div>
                ))}
                {categoryPosts.length > 3 && (
                  <div class="view-more-container">
                    <a href="/" class="view-more">View all {categoryPosts.length} posts â†’</a>
                  </div>
                )}
              </div>
            )}
          </div>
        );
      })}
    </div>
  </div>
</div>

<style>
  .mega-menu-container {
    position: relative;
    display: inline-block;
  }
  
  .mega-menu-trigger {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background: none;
    border: none;
    color: var(--text-color);
    font-weight: 500;
    cursor: pointer;
    border-radius: 6px;
    transition: all 0.2s ease;
    font-size: 1rem;
  }
  
  .mega-menu-trigger:hover {
    background-color: var(--accent-light);
    color: var(--accent);
  }
  
  .mega-menu-container:hover .mega-menu-dropdown {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }
  
  .chevron {
    transition: transform 0.2s ease;
  }
  
  .mega-menu-container:hover .chevron {
    transform: rotate(180deg);
  }
  
  .mega-menu-dropdown {
    position: fixed;
    top: 80px;
    left: 0;
    right: 0;
    width: 100vw;
    background: var(--bg-color);
    border-bottom: 1px solid var(--border-color);
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 999;
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
  }
  
  .mega-menu-content {
    max-width: 1400px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 3rem;
    padding: 3rem 2rem;
  }
  
  .mega-menu-section {
    min-height: 200px;
  }
  
  .section-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    color: var(--text-color);
  }
  
  .section-link {
    color: var(--accent);
    text-decoration: none;
    transition: color 0.2s ease;
  }
  
  .section-link:hover {
    color: var(--accent-dark);
  }
  
  .category-link {
    color: var(--text-color);
    text-decoration: none;
    transition: color 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .category-link:hover {
    color: var(--accent);
  }
  
  .category-icon {
    font-size: 1.4rem;
  }
  
  .section-description {
    font-size: 0.9rem;
    color: var(--text-muted);
    margin-bottom: 1.5rem;
    line-height: 1.5;
  }
  
  .posts-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .post-item {
    border-radius: 8px;
    overflow: hidden;
    transition: all 0.2s ease;
  }
  
  .post-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .post-link {
    display: flex;
    gap: 0.75rem;
    text-decoration: none;
    color: inherit;
    padding: 0.5rem;
    border-radius: 8px;
    transition: background-color 0.2s ease;
  }
  
  .post-link:hover {
    background-color: var(--accent-light);
  }
  
  .post-thumbnail {
    width: 60px;
    height: 60px;
    border-radius: 6px;
    overflow: hidden;
    flex-shrink: 0;
    background: var(--border-color);
  }
  
  .post-thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .post-info {
    flex: 1;
    min-width: 0;
  }
  
  .post-title {
    font-size: 0.875rem;
    font-weight: 500;
    margin: 0 0 0.25rem 0;
    color: var(--text-color);
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .post-excerpt {
    font-size: 0.75rem;
    color: var(--text-muted);
    margin: 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .view-more-container {
    padding-top: 0.5rem;
    border-top: 1px solid var(--border-color);
    margin-top: 0.5rem;
  }
  
  .view-more {
    color: var(--accent);
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: color 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
  }
  
  .view-more:hover {
    color: var(--accent-dark);
  }
  
  /* Mobile Styles */
  @media (max-width: 768px) {
    .mega-menu-dropdown {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      width: 100vw;
      margin-left: calc(-50vw + 50%);
    }
    
    .mega-menu-content {
      grid-template-columns: 1fr;
      gap: 2rem;
      padding: 2rem 1rem;
    }
    
    .post-link {
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .post-thumbnail {
      width: 100%;
      height: 120px;
    }
  }
</style>

<script>
  // Mega menu functionality for mobile
  function initMegaMenu() {
    const container = document.querySelector('.mega-menu-container');
    const dropdown = document.getElementById('mega-menu-dropdown');
    
    if (!container || !dropdown) return;
    
    // Close menu on scroll for better UX
    let scrollTimeout;
    window.addEventListener('scroll', () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        // Menu will close automatically due to CSS hover loss
      }, 100);
    });
    
    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        container.blur(); // Remove hover state
      }
    });
  }
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initMegaMenu);
  
  // Re-initialize on Astro page transitions
  document.addEventListener('astro:page-load', initMegaMenu);
</script>